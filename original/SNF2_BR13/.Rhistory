start_of_sig<-"([class]{5})([:punct:][\\s]?)([sourmash]{8})"
str_detect(SNF2_BR13_k27_s20000, start_of_sig)
start_of_sig<-"([class]{5})"
str_detect(SNF2_BR13_k27_s20000, start_of_sig)
head(SNF2_BR13_k27_s20000)
str_locate(SNF2_BR13_k27_s20000, start_of_sig)
str_locate(SNF2_BR13_k27_s20000, start_of_sig)
str_locate(SNF2_BR13_k27_s20000, start_of_sig)
str_locate(SNF2_BR13_k27_s20000[1], start_of_sig)
str_locate(SNF2_BR13_k27_s20000[,1], start_of_sig)
grep(start_of_sig, SNF2_BR13_k27_s20000[,1])
start_of_sig<-"([class]{5})([:punct:][\\s]?)([sourmash]{8})"
grep(start_of_sig, SNF2_BR13_k27_s20000[,1])
head(SNF2_BR13_k27_s20000, 700)
start_of_sig<-"([class]{5})"
grep(start_of_sig, SNF2_BR13_k27_s20000[,1])
grab_lines<-grep(start_of_sig, sourmash_compute_output[,1])
grab_lines<-grep(start_of_sig, SNF2_BR13_k27_s20000[,1])
grab_lines-1
lines<-grab_lines-1
split(SNF2_BR13_k27_s20000, findInterval(1:nrow(SNF2_BR13_k27_s20000), lines))
head(SNF2_BR13_k27_s20000, 700)
head(SNF2_BR13_k27_s20000, 1000)
names(SNF2_BR13_k27_s20000)
split_files<-split(SNF2_BR13_k27_s20000, findInterval(1:nrow(SNF2_BR13_k27_s20000), lines))
names(split_files)
head(SNF2_BR13_k27_s20000)
"(ERR)([0-9]{4,6})"
find_names<-"(ERR)([0-9]{4,6})"
grep(find_names, split_files)
grep(find_names, split_files[[1]])
split_files
unlist(split_files)
unlist(split_files)
split_files
find_names<-"(ERR)([0-9]{4,6})"
grep(find_names, SNF2_BR13_k27_s20000[,1])
str_extract(find_names, SNF2_BR13_k27_s20000[,1])
str_extract(SNF2_BR13_k27_s20000[,1], find_names)
str_match(SNF2_BR13_k27_s20000[,1], find_names)
str_subset(SNF2_BR13_k27_s20000[,1], find_names)
name_strings_isolated<-str_extract(name_strings, find_names)
name_strings<-str_subset(SNF2_BR13_k27_s20000[,1], find_names)
name_strings_isolated<-str_extract(name_strings, find_names)
name_strings_isolated
names(split_files)<-(name_strings_isolated)
names(split_files)
separate_sourmash_compute<-function(sourmash_compute_output) {
# regex for name of files
library(stringr)
find_names<-"(ERR)([0-9]{4,6})"
# subset to lines that contain the SRA accession number
name_strings<-str_subset(sourmash_compute_output[,1], find_names)
# extract only the SRA accession number
name_strings_isolated<-str_extract(name_strings, find_names)
# regex for "class"; location where to subset file
start_of_sig_regex<-"([class]{5})"
grab_lines<-grep(start_of_sig_regex, sourmash_compute_output[,1])
# save as a vector; subtract one to include "{"
start_of_sig_line<-grab_lines-1
# split files into individual data frames inside list
split_files<-split(sourmash_compute_output, findInterval(1:nrow(sourmash_compute_output), start_of_sig_line))
# assign names
names(sourmash_compute_output)<-(name_strings_isolated)
# export as individual txt files
sapply(names(sourmash_compute_output), function (x) write.table(sourmash_compute_output[[x]], file=paste(x, "txt", sep=".") ))
}
separate_sourmash_compute<-function(sourmash_compute_output) {
# regex for name of files
library(stringr)
find_names<-"(ERR)([0-9]{4,6})"
# subset to lines that contain the SRA accession number
name_strings<-str_subset(sourmash_compute_output[,1], find_names)
# extract only the SRA accession number
name_strings_isolated<-str_extract(name_strings, find_names)
# regex for "class"; location where to subset file
start_of_sig_regex<-"([class]{5})"
grab_lines<-grep(start_of_sig_regex, sourmash_compute_output[,1])
# save as a vector; subtract one to include "{"
start_of_sig_line<-grab_lines-1
# split files into individual data frames inside list
split_files<-split(sourmash_compute_output, findInterval(1:nrow(sourmash_compute_output), start_of_sig_line))
# assign names
names(sourmash_compute_output)<-(name_strings_isolated)
# export as individual txt files
sapply(names(sourmash_compute_output), function (x) write.table(sourmash_compute_output[[x]], file=paste(x, "txt", sep=".") ))
}
getwd()
list.files(".","^SNF2")
separate_sourmash_compute<-function(sourmash_compute_output) {
# regex for name of files
library(stringr)
find_names<-"(ERR)([0-9]{4,6})"
# subset to lines that contain the SRA accession number
name_strings<-str_subset(sourmash_compute_output[,1], find_names)
# extract only the SRA accession number
name_strings_isolated<-str_extract(name_strings, find_names)
# regex for "class"; location where to subset file
start_of_sig_regex<-"([class]{5})"
grab_lines<-grep(start_of_sig_regex, sourmash_compute_output[,1])
# save as a vector; subtract one to include "{"
start_of_sig_line<-grab_lines-1
# split files into individual data frames inside list
split_files<-split(sourmash_compute_output, findInterval(1:nrow(sourmash_compute_output), start_of_sig_line))
# assign names
names(sourmash_compute_output)<-(name_strings_isolated)
# export as individual txt files
sapply(names(sourmash_compute_output), function (x) write.table(sourmash_compute_output[[x]], file=paste(x, "sig", sep=".") ))
}
SNF2_BR13_k27_s20000<-read.delim("SNF2_BR13_k27_s20000")
separate_sourmash_compute(SNF2_BR13_k27_s20000)
library(stringr)
find_names<-"(ERR)([0-9]{4,6})"
# subset to lines that contain the SRA accession number
name_strings<-str_subset(SNF2_BR13_k27_s20000[,1], find_names)
# extract only the SRA accession number
name_strings_isolated<-str_extract(name_strings, find_names)
# regex for "class"; location where to subset file
start_of_sig_regex<-"([class]{5})"
grab_lines<-grep(start_of_sig_regex, SNF2_BR13_k27_s20000[,1])
# save as a vector; subtract one to include "{"
start_of_sig_line<-grab_lines-1
# split files into individual data frames inside list
split_files<-split(SNF2_BR13_k27_s20000, findInterval(1:nrow(SNF2_BR13_k27_s20000), start_of_sig_line))
separate_sourmash_compute<-function(sourmash_compute_output) {
# regex for name of files
library(stringr)
find_names<-"(ERR)([0-9]{4,6})"
# subset to lines that contain the SRA accession number
name_strings<-str_subset(sourmash_compute_output[,1], find_names)
# extract only the SRA accession number
name_strings_isolated<-str_extract(name_strings, find_names)
# regex for "class"; location where to subset file
start_of_sig_regex<-"([class]{5})"
grab_lines<-grep(start_of_sig_regex, sourmash_compute_output[,1])
# save as a vector; subtract one to include "{"
start_of_sig_line<-grab_lines-1
# split files into individual data frames inside list
split_files<-split(sourmash_compute_output, findInterval(1:nrow(sourmash_compute_output), start_of_sig_line))
# assign names
names(split_files)<-(name_strings_isolated)
# export as individual txt files
sapply(names(split_files), function (x) write.table(split_files[[x]], file=paste(x, "sig", sep=".") ))
}
separate_sourmash_compute(SNF2_BR13_k27_s20000)
?write.table()
separate_sourmash_compute<-function(sourmash_compute_output) {
# regex for name of files
library(stringr)
find_names<-"(ERR)([0-9]{4,6})"
# subset to lines that contain the SRA accession number
name_strings<-str_subset(sourmash_compute_output[,1], find_names)
# extract only the SRA accession number
name_strings_isolated<-str_extract(name_strings, find_names)
# regex for "class"; location where to subset file
start_of_sig_regex<-"([class]{5})"
grab_lines<-grep(start_of_sig_regex, sourmash_compute_output[,1])
# save as a vector; subtract one to include "{"
start_of_sig_line<-grab_lines-1
# split files into individual data frames inside list
split_files<-split(sourmash_compute_output, findInterval(1:nrow(sourmash_compute_output), start_of_sig_line))
# assign names
names(split_files)<-(name_strings_isolated)
# export as individual txt files
sapply(names(split_files), function (x) write.table(split_files[[x]], file=paste(x, "sig", sep="."), quote=FALSE, row.names=FALSE, col.names=FALSE))
}
separate_sourmash_compute<-function(sourmash_compute_output) {
# regex for name of files
library(stringr)
find_names<-"(ERR)([0-9]{4,6})"
# subset to lines that contain the SRA accession number
name_strings<-str_subset(sourmash_compute_output[,1], find_names)
# extract only the SRA accession number
name_strings_isolated<-str_extract(name_strings, find_names)
# regex for "class"; location where to subset file
start_of_sig_regex<-"([class]{5})"
grab_lines<-grep(start_of_sig_regex, sourmash_compute_output[,1])
# save as a vector; subtract one to include "{"
start_of_sig_line<-grab_lines-1
# split files into individual data frames inside list
split_files<-split(sourmash_compute_output, findInterval(1:nrow(sourmash_compute_output), start_of_sig_line))
# assign names
names(split_files)<-(name_strings_isolated)
# export as individual txt files
sapply(names(split_files), function (x) write.table(split_files[[x]], file=paste(x, "sig", sep="."), quote=FALSE, row.names=FALSE, col.names=FALSE))
}
separate_sourmash_compute(SNF2_BR13_k27_s20000)
list.files(".","^SNF2")
SNF2_files<-list.files(".","^SNF2")
SNF2_files
separate_sourmash_compute<-function(sourmash_compute_output) {
# regex for name of files
library(stringr)
find_names<-"(ERR)([0-9]{4,6})"
# subset to lines that contain the SRA accession number
name_strings<-str_subset(sourmash_compute_output[,1], find_names)
# extract only the SRA accession number
name_strings_isolated<-str_extract(name_strings, find_names)
# regex for "class"; location where to subset file
start_of_sig_regex<-"([class]{5})"
grab_lines<-grep(start_of_sig_regex, sourmash_compute_output[,1])
# save as a vector; subtract one to include "{"
start_of_sig_line<-grab_lines-1
# split files into individual data frames inside list
split_files<-split(sourmash_compute_output, findInterval(1:nrow(sourmash_compute_output), start_of_sig_line))
# assign names
names(split_files)<-(name_strings_isolated)
# export as individual txt files
sapply(names(split_files), function (x) write.table(split_files[[x]], file=paste(x, sourmash_compute_output, "sig", sep="."), quote=FALSE, row.names=FALSE, col.names=FALSE))
}
separate_sourmash_compute(SNF2_BR13_k27_s20000)
head(SNF2_BR13_k27_s20000)
head(SNF2_BR13_k27_s20000, 20)
separate_sourmash_compute<-function(sourmash_compute_output, original_file_name) {
# regex for name of files
library(stringr)
find_names<-"(ERR)([0-9]{4,6})"
# subset to lines that contain the SRA accession number
name_strings<-str_subset(sourmash_compute_output[,1], find_names)
# extract only the SRA accession number
name_strings_isolated<-str_extract(name_strings, find_names)
# regex for "class"; location where to subset file
start_of_sig_regex<-"([class]{5})"
grab_lines<-grep(start_of_sig_regex, sourmash_compute_output[,1])
# save as a vector; subtract one to include "{"
start_of_sig_line<-grab_lines-1
# split files into individual data frames inside list
split_files<-split(sourmash_compute_output, findInterval(1:nrow(sourmash_compute_output), start_of_sig_line))
# assign names
names(split_files)<-(name_strings_isolated)
# export as individual txt files
sapply(names(split_files), function (x) write.table(split_files[[x]], file=paste(x, original_file_name, "sig", sep="."), quote=FALSE, row.names=FALSE, col.names=FALSE))
}
separate_sourmash_compute(SNF2_BR13_k27_s20000, "SNF2_BR13_k27_s20000")
SNF2_file_names<-list.files(".","^SNF2")
SNF2_file_names<-list.files(".","^SNF2")
SNF2_files<-lapply(SNF2_file_names, read.delim)
SNF2_files
sapply(SNF2_files, separate_sourmash_compute(SNF2_files, SNF2_file_names))
sapply(SNF2_files, SNF2_file_names, separate_sourmash_compute)
sapply(SNF2_files, separate_sourmash_compute, original_file_name=SNF2_file_names)
original_file_names<-list.files(".","^SNF2")
original_file_name<-list.files(".","^SNF2")
sapply(SNF2_files, separate_sourmash_compute, original_file_name=original_file_name)
SNF2_files<-lapply(SNF2_file_names, read.delim)
head(SNF2_files)
SNF2_files<-sapply(SNF2_file_names, read.delim)
SNF2_files
length(SNF2_files)
name(SNF2_files[[1]])
names(SNF2_files[[1]])
names(SNF2_files)
names(SNF2_files)[[1]]
separate_sourmash_compute<-function(sourmash_compute_output) {
# isolate original file name
original_name<-for (i in length(sourmash_compute_output)) {
names(sourmash_compute_output)[[i]]
}
# regex for name of individual files
library(stringr)
find_names<-"(ERR)([0-9]{4,6})"
# subset to lines that contain the SRA accession number
name_strings<-str_subset(sourmash_compute_output[,1], find_names)
# extract only the SRA accession number
name_strings_isolated<-str_extract(name_strings, find_names)
# regex for "class"; location where to subset file
start_of_sig_regex<-"([class]{5})"
grab_lines<-grep(start_of_sig_regex, sourmash_compute_output[,1])
# save as a vector; subtract one to include "{"
start_of_sig_line<-grab_lines-1
# split files into individual data frames inside list
split_files<-split(sourmash_compute_output, findInterval(1:nrow(sourmash_compute_output), start_of_sig_line))
# assign names
names(split_files)<-(name_strings_isolated)
# export as individual txt files
sapply(names(split_files), function (x) write.table(split_files[[x]], file=paste(x, original_name, "sig", sep="."), quote=FALSE, row.names=FALSE, col.names=FALSE))
}
sapply(SNF2_files, separate_sourmash_compute)
eparate_sourmash_compute<-function(sourmash_compute_output) {
# isolate original file name
original_name<-for (i in length(sourmash_compute_output)) {
names(sourmash_compute_output)[[i]]
}
# regex for name of individual files
library(stringr)
find_names<-"(ERR)([0-9]{4,6})"
# subset to lines that contain the SRA accession number
name_strings<-str_subset(sourmash_compute_output[,1], find_names)
# extract only the SRA accession number
name_strings_isolated<-str_extract(name_strings, find_names)
# regex for "class"; location where to subset file
start_of_sig_regex<-"([class]{5})"
grab_lines<-grep(start_of_sig_regex, sourmash_compute_output[,1])
# save as a vector; subtract one to include "{"
start_of_sig_line<-grab_lines-1
# split files into individual data frames inside list
split_files<-split(sourmash_compute_output, findInterval(1:nrow(sourmash_compute_output), start_of_sig_line))
# assign names
names(split_files)<-(name_strings_isolated)
# export as individual txt files
sapply(names(split_files), function (x) write.table(split_files[[x]], file=paste(x, original_name, "sig", sep="."), quote=FALSE, row.names=FALSE, col.names=FALSE))
}
sapply(SNF2_files, separate_sourmash_compute)
sapply(SNF2_files, separate_sourmash_compute)
sapply(SNF2_files, separate_sourmash_compute)
lapply(SNF2_files, separate_sourmash_compute)
length(SNF2_files)
names(SNF2_files)[[1]]
names(SNF2_files)[[2]]
apply(SNF2_files, separate_sourmash_compute)
?apply()
apply(SNF2_files, 81, separate_sourmash_compute)
apply(SNF2_files, (,81), separate_sourmash_compute)
apply(SNF2_files, 1:81, separate_sourmash_compute)
original_name<-for (i in length(SNF2_files)) {
names(SNF2_files)[[i]]
}
original_name
for (i in length(SNF2_files)) {
names(SNF2_files)[[i]]
}
original_name<- c()
for (i in length(SNF2_files)) {
names(SNF2_files)[[i]]
return(original_name)
}
original_name<- c()
for (i in length(SNF2_files)) {
original_name<-names(SNF2_files)[[i]]
return(original_name)
}
length(SNF2_files)
SNF2_files
names(SNF2_files)
original_name<- c()
for (i in length(names(SNF2_files))) {
original_name<-names(SNF2_files)[[i]]
return(original_name)
}
for (i in length(names(SNF2_files))) {
original_name<-names(SNF2_files)[[i]]
}
original_name<- c()
for (i in length(names(SNF2_files))) {
original_name<-names(SNF2_files)[[i]]
return(original_name)
}
separate_sourmash_compute<-function(sourmash_compute_output) {
# isolate original file name
original_name<- c()
for (i in length(names(SNF2_files))) {
original_name<-names(SNF2_files)[[i]]
}
# regex for name of individual files
library(stringr)
find_names<-"(ERR)([0-9]{4,6})"
# subset to lines that contain the SRA accession number
name_strings<-str_subset(sourmash_compute_output[,1], find_names)
# extract only the SRA accession number
name_strings_isolated<-str_extract(name_strings, find_names)
# regex for "class"; location where to subset file
start_of_sig_regex<-"([class]{5})"
grab_lines<-grep(start_of_sig_regex, sourmash_compute_output[,1])
# save as a vector; subtract one to include "{"
start_of_sig_line<-grab_lines-1
# split files into individual data frames inside list
split_files<-split(sourmash_compute_output, findInterval(1:nrow(sourmash_compute_output), start_of_sig_line))
# assign names
names(split_files)<-(name_strings_isolated)
# export as individual txt files
sapply(names(split_files), function (x) write.table(split_files[[x]], file=paste(x, original_name, "sig", sep="."), quote=FALSE, row.names=FALSE, col.names=FALSE))
}
sapply(SNF2_files, separate_sourmash_compute)
separate_sourmash_compute(SNF2_files[[1]], names(SNF2_files)[[1]])
separate_sourmash_compute<-function(sourmash_compute_output, original_file_name) {
# regex for name of individual files
library(stringr)
find_names<-"(ERR)([0-9]{4,6})"
# subset to lines that contain the SRA accession number
name_strings<-str_subset(sourmash_compute_output[,1], find_names)
# extract only the SRA accession number
name_strings_isolated<-str_extract(name_strings, find_names)
# regex for "class"; location where to subset file
start_of_sig_regex<-"([class]{5})"
grab_lines<-grep(start_of_sig_regex, sourmash_compute_output[,1])
# save as a vector; subtract one to include "{"
start_of_sig_line<-grab_lines-1
# split files into individual data frames inside list
split_files<-split(sourmash_compute_output, findInterval(1:nrow(sourmash_compute_output), start_of_sig_line))
# assign names
names(split_files)<-(name_strings_isolated)
# export as individual txt files
sapply(names(split_files), function (x) write.table(split_files[[x]], file=paste(x, original_file_name, "sig", sep="."), quote=FALSE, row.names=FALSE, col.names=FALSE))
}
separate_sourmash_compute(SNF2_files[[1]], names(SNF2_files)[[1]])
separate_sourmash_compute(SNF2_BR13_k27_s20000, "SNF2_BR13_k27_s20000")
separate_sourmash_compute(SNF2_files[[1]], names(SNF2_files)[[1]])
names(SNF2_files)[2]
SNF_files[1]
SNF2_files[1]
separate_sourmash_compute(SNF2_files[1], names(SNF2_files)[1])
names(SNF2_files)[1]
separate_sourmash_compute(SNF2_files[1], "SNF2_BR13_k12_s1000")
separate_sourmash_compute(SNF2_files[[1]], "SNF2_BR13_k12_s1000")
unlist(SNF2_files)
split(SNF2_files)
SNF2_files<-sapply(SNF2_file_names, read.delim)
split(SNF2_files)
for(i in SNF2_file_names){
filepath <- file.path(".",paste(i))
assign(i, read.delim(filepath)
}
###Load all files
for(i in SNF2_file_names){
filepath <- file.path(".",paste(i))
assign(i, read.delim(filepath))
}
View(SNF2_BR13_k12_s1000)
ls()
remove(eparate_sourmash_compute, i)
objects<-ls()
objects[12:93]
objects<-ls()
objects
objects[11:91]
file_names<-objects[11:91]
files<-c(SNF2_BR13_k12_s1000, SNF2_BR13_k12_s10000,  SNF2_BR13_k12_s160000)
files
file_names
write.csv(file_names, "SNF2_file_names")
write.csv(file_names, "SNF2_file_names.csv")
separate_sourmash_compute(SNF2_BR13_k12_s1000, 'SNF2_BR13_k12_s1000')
separate_sourmash_compute(SNF2_BR13_k12_s10000, 'SNF2_BR13_k12_s10000')
separate_sourmash_compute(SNF2_BR13_k12_s160000, 'SNF2_BR13_k12_s160000')
separate_sourmash_compute(SNF2_BR13_k12_s20000, 'SNF2_BR13_k12_s20000')
separate_sourmash_compute(SNF2_BR13_k12_s240000, 'SNF2_BR13_k12_s240000')
separate_sourmash_compute(SNF2_BR13_k12_s40000, 'SNF2_BR13_k12_s40000')
separate_sourmash_compute(SNF2_BR13_k12_s480000, 'SNF2_BR13_k12_s480000')
separate_sourmash_compute(SNF2_BR13_k12_s5000, 'SNF2_BR13_k12_s5000')
separate_sourmash_compute(SNF2_BR13_k12_s80000, 'SNF2_BR13_k12_s80000')
separate_sourmash_compute(SNF2_BR13_k15_s1000, 'SNF2_BR13_k15_s1000')
separate_sourmash_compute(SNF2_BR13_k15_s10000, 'SNF2_BR13_k15_s10000')
separate_sourmash_compute(SNF2_BR13_k15_s160000, 'SNF2_BR13_k15_s160000')
separate_sourmash_compute(SNF2_BR13_k15_s20000, 'SNF2_BR13_k15_s20000')
separate_sourmash_compute(SNF2_BR13_k15_s240000, 'SNF2_BR13_k15_s240000')
separate_sourmash_compute(SNF2_BR13_k15_s40000, 'SNF2_BR13_k15_s40000')
separate_sourmash_compute(SNF2_BR13_k15_s480000, 'SNF2_BR13_k15_s480000')
separate_sourmash_compute(SNF2_BR13_k15_s5000, 'SNF2_BR13_k15_s5000')
separate_sourmash_compute(SNF2_BR13_k15_s80000, 'SNF2_BR13_k15_s80000')
separate_sourmash_compute(SNF2_BR13_k18_s1000, 'SNF2_BR13_k18_s1000')
separate_sourmash_compute(SNF2_BR13_k18_s10000, 'SNF2_BR13_k18_s10000')
separate_sourmash_compute(SNF2_BR13_k18_s160000, 'SNF2_BR13_k18_s160000')
separate_sourmash_compute(SNF2_BR13_k18_s20000, 'SNF2_BR13_k18_s20000')
separate_sourmash_compute(SNF2_BR13_k18_s240000, 'SNF2_BR13_k18_s240000')
separate_sourmash_compute(SNF2_BR13_k18_s40000, 'SNF2_BR13_k18_s40000')
separate_sourmash_compute(SNF2_BR13_k18_s480000, 'SNF2_BR13_k18_s480000')
separate_sourmash_compute(SNF2_BR13_k18_s5000, 'SNF2_BR13_k18_s5000')
separate_sourmash_compute(SNF2_BR13_k18_s80000, 'SNF2_BR13_k18_s80000')
separate_sourmash_compute(SNF2_BR13_k21_s1000, 'SNF2_BR13_k21_s1000')
separate_sourmash_compute(SNF2_BR13_k21_s10000, 'SNF2_BR13_k21_s10000')
separate_sourmash_compute(SNF2_BR13_k21_s160000, 'SNF2_BR13_k21_s160000')
separate_sourmash_compute(SNF2_BR13_k21_s20000, 'SNF2_BR13_k21_s20000')
separate_sourmash_compute(SNF2_BR13_k21_s240000, 'SNF2_BR13_k21_s240000')
separate_sourmash_compute(SNF2_BR13_k21_s40000, 'SNF2_BR13_k21_s40000')
separate_sourmash_compute(SNF2_BR13_k21_s480000, 'SNF2_BR13_k21_s480000')
separate_sourmash_compute(SNF2_BR13_k21_s5000, 'SNF2_BR13_k21_s5000')
separate_sourmash_compute(SNF2_BR13_k21_s80000, 'SNF2_BR13_k21_s80000')
separate_sourmash_compute(SNF2_BR13_k24_s1000, 'SNF2_BR13_k24_s1000')
separate_sourmash_compute(SNF2_BR13_k24_s10000, 'SNF2_BR13_k24_s10000')
separate_sourmash_compute(SNF2_BR13_k24_s160000, 'SNF2_BR13_k24_s160000')
separate_sourmash_compute(SNF2_BR13_k24_s20000, 'SNF2_BR13_k24_s20000')
separate_sourmash_compute(SNF2_BR13_k24_s240000, 'SNF2_BR13_k24_s240000')
separate_sourmash_compute(SNF2_BR13_k24_s40000, 'SNF2_BR13_k24_s40000')
separate_sourmash_compute(SNF2_BR13_k24_s480000, 'SNF2_BR13_k24_s480000')
separate_sourmash_compute(SNF2_BR13_k24_s5000, 'SNF2_BR13_k24_s5000')
separate_sourmash_compute(SNF2_BR13_k24_s80000, 'SNF2_BR13_k24_s80000')
separate_sourmash_compute(SNF2_BR13_k27_s1000, 'SNF2_BR13_k27_s1000')
separate_sourmash_compute(SNF2_BR13_k27_s10000, 'SNF2_BR13_k27_s10000')
separate_sourmash_compute(SNF2_BR13_k27_s160000, 'SNF2_BR13_k27_s160000')
separate_sourmash_compute(SNF2_BR13_k27_s20000, 'SNF2_BR13_k27_s20000')
separate_sourmash_compute(SNF2_BR13_k27_s240000, 'SNF2_BR13_k27_s240000')
separate_sourmash_compute(SNF2_BR13_k27_s40000, 'SNF2_BR13_k27_s40000')
separate_sourmash_compute(SNF2_BR13_k27_s480000, 'SNF2_BR13_k27_s480000')
separate_sourmash_compute(SNF2_BR13_k27_s5000, 'SNF2_BR13_k27_s5000')
separate_sourmash_compute(SNF2_BR13_k27_s80000, 'SNF2_BR13_k27_s80000')
separate_sourmash_compute(SNF2_BR13_k30_s1000, 'SNF2_BR13_k30_s1000')
separate_sourmash_compute(SNF2_BR13_k30_s10000, 'SNF2_BR13_k30_s10000')
separate_sourmash_compute(SNF2_BR13_k30_s160000, 'SNF2_BR13_k30_s160000')
separate_sourmash_compute(SNF2_BR13_k30_s20000, 'SNF2_BR13_k30_s20000')
separate_sourmash_compute(SNF2_BR13_k30_s240000, 'SNF2_BR13_k30_s240000')
separate_sourmash_compute(SNF2_BR13_k30_s40000, 'SNF2_BR13_k30_s40000')
separate_sourmash_compute(SNF2_BR13_k30_s480000, 'SNF2_BR13_k30_s480000')
separate_sourmash_compute(SNF2_BR13_k30_s5000, 'SNF2_BR13_k30_s5000')
separate_sourmash_compute(SNF2_BR13_k30_s80000, 'SNF2_BR13_k30_s80000')
separate_sourmash_compute(SNF2_BR13_k6_s1000, 'SNF2_BR13_k6_s1000')
separate_sourmash_compute(SNF2_BR13_k6_s10000, 'SNF2_BR13_k6_s10000')
separate_sourmash_compute(SNF2_BR13_k6_s160000, 'SNF2_BR13_k6_s160000')
separate_sourmash_compute(SNF2_BR13_k6_s20000, 'SNF2_BR13_k6_s20000')
separate_sourmash_compute(SNF2_BR13_k6_s240000, 'SNF2_BR13_k6_s240000')
separate_sourmash_compute(SNF2_BR13_k6_s40000, 'SNF2_BR13_k6_s40000')
separate_sourmash_compute(SNF2_BR13_k6_s480000, 'SNF2_BR13_k6_s480000')
separate_sourmash_compute(SNF2_BR13_k6_s5000, 'SNF2_BR13_k6_s5000')
separate_sourmash_compute(SNF2_BR13_k6_s80000, 'SNF2_BR13_k6_s80000')
separate_sourmash_compute(SNF2_BR13_k9_s1000, 'SNF2_BR13_k9_s1000')
separate_sourmash_compute(SNF2_BR13_k9_s10000, 'SNF2_BR13_k9_s10000')
separate_sourmash_compute(SNF2_BR13_k9_s160000, 'SNF2_BR13_k9_s160000')
separate_sourmash_compute(SNF2_BR13_k9_s20000, 'SNF2_BR13_k9_s20000')
separate_sourmash_compute(SNF2_BR13_k9_s240000, 'SNF2_BR13_k9_s240000')
separate_sourmash_compute(SNF2_BR13_k9_s40000, 'SNF2_BR13_k9_s40000')
separate_sourmash_compute(SNF2_BR13_k9_s480000, 'SNF2_BR13_k9_s480000')
separate_sourmash_compute(SNF2_BR13_k9_s5000, 'SNF2_BR13_k9_s5000')
separate_sourmash_compute(SNF2_BR13_k9_s80000, 'SNF2_BR13_k9_s80000')
